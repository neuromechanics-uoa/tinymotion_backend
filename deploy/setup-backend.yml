---
- name: Wait for hosts to respond
  hosts: all
  gather_facts: false
  any_errors_fatal: true
  tasks:
    - name: Wait for hosts to respond
      ansible.builtin.wait_for_connection:
        sleep: 10
        timeout: 600

- name: Upgrade and configure
  hosts: all
  become: yes
  tasks:
    - name: Full system upgrade
      apt:
        update_cache: yes
        cache_valid_time: 3600
        upgrade: dist

    - name: Check if reboot required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: Reboot after upgrade
      reboot:
      when: reboot_required_file.stat.exists == true

    - name: Set timezone
      community.general.timezone:
        name: Pacific/Auckland

- name: Setup duckdns DDNS
  hosts: all
  become: yes
  vars:
    use_duckdns: false
    infisical_secrets: "{{ lookup('infisical.vault.read_secrets', \
                                  universal_auth_client_id=lookup('env', 'INFISICAL_CLIENT_ID'), \
                                  universal_auth_client_secret=lookup('env', 'INFISICAL_CLIENT_SECRET'), \
                                  project_id=lookup('env', 'INFISICAL_PROJECT_ID'), \
                                  path='/tinymotion_backend/ansible', \
                                  env_slug=lookup('env', 'INFISICAL_ENV')) | items2dict }}"
  tasks:
    - name: Install cron and curl
      apt:
        name:
          - cron
          - curl
        state: present
      when: use_duckdns == true
    
    - name: Enable cron service
      service:
        name: cron
        state: started
        enabled: yes
      when: use_duckdns == true

    - name: Create user for running duckdns update
      ansible.builtin.user:
        name: duckdns
      when: use_duckdns == true

    - name: Install duckdns cron job
      ansible.builtin.cron:
        name: duckdns
        user: duckdns
        day: "*"
        hour: "*"
        minute: "*"
        job: curl -o /home/duckdns/curl.log "https://www.duckdns.org/update?domains={{ infisical_secrets.DUCKDNS_DOMAIN }}&token={{ infisical_secrets.DUCKDNS_TOKEN }}&ip="
        state: present
      no_log: true
      when: use_duckdns == true

- name: Install docker
  hosts: all
  become: yes
  vars:
    - docker_users:
      - "{{ ansible_user }}"
  roles:
    - geerlingguy.docker

- name: Setup and run tinymotion backend
  hosts: all
  become: yes
  vars:
    tinymotion_image_tag: latest
    pull_policy: policy
    infisical_secrets: "{{ lookup('infisical.vault.read_secrets', \
                                  universal_auth_client_id=lookup('env', 'INFISICAL_CLIENT_ID'), \
                                  universal_auth_client_secret=lookup('env', 'INFISICAL_CLIENT_SECRET'), \
                                  project_id=lookup('env', 'INFISICAL_PROJECT_ID'), \
                                  path='/tinymotion_backend/ansible', \
                                  env_slug=lookup('env', 'INFISICAL_ENV')) | items2dict }}"
  tasks:
    - name: Create directory for deployment
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/tinymotion_backend"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create subdirectory for config
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/tinymotion_backend/config"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create subdirectory for data
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/tinymotion_backend/data"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create data subdirectory for swag config
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/tinymotion_backend/data/swag_config"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Create data subdirectory for tinymotion_backend
      ansible.builtin.file:
        path: "/home/{{ ansible_user }}/tinymotion_backend/data/tinymotion_backend"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Configure docker-compose.yml
      ansible.builtin.template:
        src: docker-compose.yml.j2
        dest: "/home/{{ ansible_user }}/tinymotion_backend/docker-compose.yml"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Configure nginx subdomain
      ansible.builtin.template:
        src: tinymotion_backend.subdomain.conf.j2
        dest: "/home/{{ ansible_user }}/tinymotion_backend/config/tinymotion_backend.subdomain.conf"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Install and configure tinymotion-backend wrapper
      ansible.builtin.template:
        src: tinymotion-backend.sh.j2
        dest: /usr/local/bin/tinymotion-backend
        owner: root
        group: root
        mode: '0755'

    - name: Run services using docker compose
      community.docker.docker_compose_v2:
        project_src: "/home/{{ ansible_user }}/tinymotion_backend"
        state: present
        pull: "{{ pull_policy }}"
      environment:
        INFISICAL_CLIENT_ID: "{{ infisical_secrets.INFISICAL_CLIENT_ID }}"
        INFISICAL_CLIENT_SECRET: "{{ infisical_secrets.INFISICAL_CLIENT_SECRET }}"
      no_log: true
