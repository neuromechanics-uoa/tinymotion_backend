{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>Documentation for the backend system for the tinymotion General Movements Assessment data collection app.</p> <p>TinyMotion Backend is written in Python and exposes an API (built using FastAPI) and also has a command line interface for administering the backend.</p> <p>The backend is currently under development and likely to change.</p>"},{"location":"api/","title":"API Reference","text":"<p>This page provides documentation for the application programming interface.</p> <p></p>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#overview","title":"Overview","text":"<p>The backend is written in Python using:</p> <ul> <li>the FastAPI framework</li> <li>Pydantic and SQLAlchemy (via SQLModel)</li> <li>click for the command line interface</li> <li>SQLite database</li> <li>pytest for testing</li> <li>mkdocs for documentation</li> </ul> <p>Deployment is achieved using Terraform and Ansible to create and configure a VM on an OpenStack cloud (NeSI RDC). The TinyMotion backend software is containerised using docker and run using Docker compose. SWAG (secure web access gateway) is used in front of the API and handles generating SSL certificates.</p>"},{"location":"architecture/#api","title":"API","text":"<p>The API provides endpoints to authenticate, create an infant, create a consent and upload a video. There are no endpoints to retrieve information in the initial version of the API.</p> <p>An infant must be created first. Once an infant has been created a consent must be created for that infant. The consent is linked to the infant by NHI number. Once a consent has been created, videos can be created for the infant. Videos are linked to an infant by NHI number. The API will return errors in the following cases (not exclusive, see also API docs TODO):</p> <ul> <li>a consent is added with an NHI number that does not match an infant in the database</li> <li>a video is added with an NHI number that does not match an infant in the database</li> <li>a video is added for an infant that has no consent recorded in the database</li> </ul>"},{"location":"architecture/#authentication","title":"Authentication","text":"<p>An access key is created for each user and shared with them. The access key is entered into the app and an API endpoint called to exchange the access key for access and refresh JWT tokens. The access token is passed in the Authorization header with subsequent API requests. If the access token expires, the refresh token can be used to generate a new access token. If the refresh token expires the access key must be entered again.</p> <p>Initially, all users of the app will be treated the same (authorisation). All users will be able to upload (POST) information via the API. There are no API endpoints to retrieve information.</p> <p>Note</p> <p>This approach to authentication was chosen as a compromise between security and ease of use for the early access users of the app.</p>"},{"location":"architecture/#administration","title":"Administration","text":"<p>Administration (e.g. creating/updating users, accessing videos and information in the database) is done through SSH and a command line interface (IN PROGRESS). SSH to the VM is by public key only.</p>"},{"location":"architecture/#database","title":"Database","text":"<p>The initial version uses an SQLite database with the following structure:</p> <pre><code>erDiagram\n    USER {\n        int user_id PK\n        string email \"Must be unique; encrypted\"\n        string access_key \"Must be unique; encrypted\"\n        boolean disabled\n    }\n\n    INFANT {\n        int infant_id PK\n        string nhi_number \"Must be unique; encrypted\"\n        string full_name \"Encrypted\"\n        date birth_date \"Encrypted\"\n        date due_date \"Encrypted\"\n        datetime created_at\n        int created_by FK\n    }\n\n    CONSENT {\n        int consent_id PK\n        string consent_giver_name \"Can be null if consent collected physically; encrypted\"\n        string consent_giver_email \"Can be null if consent collected physically; encrypted\"\n        boolean collected_physically\n        int infant_id FK\n        datetime created_at\n        int created_by FK\n    }\n\n    VIDEO {\n        int video_id PK\n        int infant_id FK\n        string video_name \"Name of stored video, a randomly generated UUID\"\n        int video_size \"Size of the encrypted video in bytes\"\n        string sha256sum \"SHA-256 checksum of the original video\"\n        string sha256sum_enc \"SHA-256 checksum of the encrypted video\"\n        datetime created_at\n        int created_by FK\n    }\n\n    INFANT ||--o{ CONSENT : \"is covered by\"\n    INFANT ||--o{ VIDEO : \"features in\"\n    USER ||--o{ CONSENT : creates\n    USER ||--o{ VIDEO : creates\n    USER ||--o{ INFANT : creates\n\n</code></pre> <p>Fields marked as encrypted are encrypted at rest using <code>StringEncryptedType</code> (symmetric encryption) from SQLAlchemy-Utils (IN PROGRESS).</p> <p>Database backups can be achieved by copying the SQLite database file. Encrypted information in the backups will not be understandable without the secret key that was used to encrypt them.</p> <p>Note</p> <p>SQLite should be sufficient while running at a small scale, and is good for speed of development, but could be worth considering switching to another database engine, such as PostgreSQL, when scaling up. This should be relatively simple as the database engine is abstracted away by SQLAlchemy.</p>"},{"location":"architecture/#video-files","title":"Video files","text":"<p>Video files are encrypted as they are received and written to disk on the VM in encrypted form only. Videos are encrypted using Fernet (symmetric encryption, i.e. requiring the same secret key to decrypt them as was used to encrypt them). Encrypted video files are approximately 1/3 bigger than the unencrypted version would be. Video file names on disk are randomly generated UUIDs, these names are stored as video_name in the VIDEO table in the database.</p> <p>Encrypted video files will be stored on object storage (TODO). Once they have been pushed to object storage they will be removed from VM disk.</p>"},{"location":"architecture/#secrets-management","title":"Secrets management","text":"<p>TODO</p>"},{"location":"cli/","title":"CLI Reference","text":"<p>This page provides documentation for the command line interface.</p>"},{"location":"cli/#tinymotion-backend","title":"tinymotion-backend","text":"<p>Command line interface to TinyMotion Backend</p> <p>Usage:</p> <pre><code>tinymotion-backend [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#infant","title":"infant","text":"<p>Commands to interact with infants in the backend.</p> <p>Usage:</p> <pre><code>tinymotion-backend infant [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#create","title":"create","text":"<p>Create a new infant.</p> <p>Usage:</p> <pre><code>tinymotion-backend infant create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -u, --user-id INTEGER        ID of the User to create the Infant  [required]\n  -f, --full-name TEXT         The infant's full name  [required]\n  -n, --nhi-number TEXT        The infant's NHI number  [required]\n  -b, --birth-date [%Y-%m-%d]  The infant's date of birth  [required]\n  -d, --due-date [%Y-%m-%d]    The infant's expected date of birth  [required]\n  --help                       Show this message and exit.\n</code></pre>"},{"location":"cli/#delete","title":"delete","text":"<p>Delete the specified Infant.</p> <p>INFANT_ID is the id of the infant to delete.</p> <p>Usage:</p> <pre><code>tinymotion-backend infant delete [OPTIONS] INFANT_ID\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#list","title":"list","text":"<p>List existing infants.</p> <p>Usage:</p> <pre><code>tinymotion-backend infant list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#user","title":"user","text":"<p>Commands to interact with users in the backend.</p> <p>Usage:</p> <pre><code>tinymotion-backend user [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#create_1","title":"create","text":"<p>Create a new user.</p> <p>Usage:</p> <pre><code>tinymotion-backend user create [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  -e, --email TEXT       The new user's email  [required]\n  -k, --access-key TEXT  The new user's access key that they will use to login\n                         [required]\n  -d, --disabled         Disable the user's account on creation\n  --help                 Show this message and exit.\n</code></pre>"},{"location":"cli/#delete_1","title":"delete","text":"<p>Delete the specified User.</p> <p>USER_ID is the id of the user to delete.</p> <p>Usage:</p> <pre><code>tinymotion-backend user delete [OPTIONS] USER_ID\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#list_1","title":"list","text":"<p>List existing users.</p> <p>Usage:</p> <pre><code>tinymotion-backend user list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#update","title":"update","text":"<p>Update the specified User.</p> <p>USER_ID is the id of the user to update.</p> <p>Usage:</p> <pre><code>tinymotion-backend user update [OPTIONS] USER_ID\n</code></pre> <p>Options:</p> <pre><code>  -e, --email TEXT        Update the user's email\n  -k, --access-key TEXT   Update the user's access key\n  -d, --disabled BOOLEAN  Update whether the user is disabled\n  --help                  Show this message and exit.\n</code></pre>"},{"location":"cli/#version","title":"version","text":"<p>Print the version of the TinyMotion backend and exit.</p> <p>Usage:</p> <pre><code>tinymotion-backend version [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#video","title":"video","text":"<p>Commands to interact with videos in the backend.</p> <p>Usage:</p> <pre><code>tinymotion-backend video [OPTIONS] COMMAND [ARGS]...\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#delete_2","title":"delete","text":"<p>Delete the specified video and the associated record in the database.</p> <p>VIDEO_ID is the id of the video to delete.</p> <p>Usage:</p> <pre><code>tinymotion-backend video delete [OPTIONS] VIDEO_ID\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"},{"location":"cli/#list_2","title":"list","text":"<p>List stored videos.</p> <p>Usage:</p> <pre><code>tinymotion-backend video list [OPTIONS]\n</code></pre> <p>Options:</p> <pre><code>  --help  Show this message and exit.\n</code></pre>"}]}